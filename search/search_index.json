{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ShellHub is a modern SSH server for remotely accessing Linux devices via command line (using any SSH client) or web-based user interface. It is intended to be used instead of sshd. Typically, if you want to SSH into a Linux device on a local network, you just need to know its IP address. However, in order to access a Linux device from outside the local network, you usually need to jump a lot of laps, such as getting its public IP address and adjusting some settings on the home router. Changing the VPN/firewall configuration can be cumbersome if the device is behind a corporate firewall that does not allow SSH connections. ShellHub provide a way to skill all the hasless. You can easily access any Linux device behind firewall and NAT.","title":"What is ShellHub?"},{"location":"getting-started/","text":"This tutorial will guide you through the steps needed to install and run ShellHub on your local machine. Installing \u00b6 ShellHub is built using the microservices design pattern, meaning that multiple small, isolated services make up the server. In order to make it easy to test ShellHub as a whole, we have created a Docker Compose environment that brings all of these components up and connects them together on a single machine. Before continuing, make sure you have installed Docker Engine and Docker Compose In a working directory, download the docker-compose file: $ wget https://raw.githubusercontent.com/shellhub-io/shellhub/master/docker-compose.yml Brings up the ShellHub server: $ docker-compose up -d Creating the initial user \u00b6 After ShellHub server have been up and running you need to create the initial user. Go to the working directory and download the add-user utility from our repository: $ wget https://raw.githubusercontent.com/shellhub-io/shellhub/master/bin/add-user Then run the add-user utility: $ sh ./add-user <username> <password> Adding your first device \u00b6 ShellHub can run in most of any Linux-based operating system with Docker Engine installed and running , no matter what architecture is your device. The following architectures are supported: amd64 arm32v6 arm64v8 Open the terminal of your device or access your device with ssh on the local network, then run the following commands to install the ShellHub agent: $ curl \"http://localhost/install.sh?tenant_id=<TENANT_ID>\" | sh Note that you have to replace <TENANT-ID> with your Tenant ID Connecting to your device \u00b6 ShellHub supports different connection methods: Web-based SSH client inside ShellHub UI (Chrome, Firefox) Traditional command line SSH client (Linux, Mac OS X) Any GUI SSH client like PuTTY (Windows) Open the ShellHub UI at http://localhost and sign in using the username and password that was generated in a previous step. Once you had sign in, go to Device Fleet page and follow instructions of one method: Web-based SSH client \u00b6 In the Device Fleet page choose the device you want to connect to and click on Terminal icon located at Actions column of the table. A dialog will show prompting you for the username and password of any existing user in device's operating system. After providing credentials click on Connect button. Command line SSH client \u00b6 To connect to your device using a command line SSH client you need to know its SSHID address. In the Device Fleet page choose the device you want to connect to and copy the device's SSHID address clicking on Copy icon located at SSHID address column of the table. Run the following command in your terminal: $ ssh <USER>@<SSHID> Make sure to replace <USER> with existing user in device's operating system and <SSHID> with the SSHID address copied before. PuTTY GUI SSH client \u00b6 To connect to your device using a GUI SSH client you also need to its SSHID address. In the Device Fleet page choose the device you want to connect to and copy the device's SSHID address clicking on Copy icon located at SSHID address column of the table. Open Putty and fill it out with the following details: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with existing user in device's operating system and <SSHID> with the SSHID address copied before.","title":"Getting started"},{"location":"getting-started/#installing","text":"ShellHub is built using the microservices design pattern, meaning that multiple small, isolated services make up the server. In order to make it easy to test ShellHub as a whole, we have created a Docker Compose environment that brings all of these components up and connects them together on a single machine. Before continuing, make sure you have installed Docker Engine and Docker Compose In a working directory, download the docker-compose file: $ wget https://raw.githubusercontent.com/shellhub-io/shellhub/master/docker-compose.yml Brings up the ShellHub server: $ docker-compose up -d","title":"Installing"},{"location":"getting-started/#creating-the-initial-user","text":"After ShellHub server have been up and running you need to create the initial user. Go to the working directory and download the add-user utility from our repository: $ wget https://raw.githubusercontent.com/shellhub-io/shellhub/master/bin/add-user Then run the add-user utility: $ sh ./add-user <username> <password>","title":"Creating the initial user"},{"location":"getting-started/#adding-your-first-device","text":"ShellHub can run in most of any Linux-based operating system with Docker Engine installed and running , no matter what architecture is your device. The following architectures are supported: amd64 arm32v6 arm64v8 Open the terminal of your device or access your device with ssh on the local network, then run the following commands to install the ShellHub agent: $ curl \"http://localhost/install.sh?tenant_id=<TENANT_ID>\" | sh Note that you have to replace <TENANT-ID> with your Tenant ID","title":"Adding your first device"},{"location":"getting-started/#connecting-to-your-device","text":"ShellHub supports different connection methods: Web-based SSH client inside ShellHub UI (Chrome, Firefox) Traditional command line SSH client (Linux, Mac OS X) Any GUI SSH client like PuTTY (Windows) Open the ShellHub UI at http://localhost and sign in using the username and password that was generated in a previous step. Once you had sign in, go to Device Fleet page and follow instructions of one method:","title":"Connecting to your device"},{"location":"getting-started/#web-based-ssh-client","text":"In the Device Fleet page choose the device you want to connect to and click on Terminal icon located at Actions column of the table. A dialog will show prompting you for the username and password of any existing user in device's operating system. After providing credentials click on Connect button.","title":"Web-based SSH client"},{"location":"getting-started/#command-line-ssh-client","text":"To connect to your device using a command line SSH client you need to know its SSHID address. In the Device Fleet page choose the device you want to connect to and copy the device's SSHID address clicking on Copy icon located at SSHID address column of the table. Run the following command in your terminal: $ ssh <USER>@<SSHID> Make sure to replace <USER> with existing user in device's operating system and <SSHID> with the SSHID address copied before.","title":"Command line SSH client"},{"location":"getting-started/#putty-gui-ssh-client","text":"To connect to your device using a GUI SSH client you also need to its SSHID address. In the Device Fleet page choose the device you want to connect to and copy the device's SSHID address clicking on Copy icon located at SSHID address column of the table. Open Putty and fill it out with the following details: Host Name (or IP address): <USER> @ <SSHID> Port: 22 Connection type: SSH Make sure to replace <USER> with existing user in device's operating system and <SSHID> with the SSHID address copied before.","title":"PuTTY GUI SSH client"},{"location":"introduction/","text":"Introduction \u00b6 This introduction section is intended to give a high-level overview of the ShellHub. The ShellHub is composed of two major parts, the SSH Gateway and the Device Agent . These parts work together to provide a secure SSH connection across the network to Linux-based devices. Basic concepts \u00b6 There are few basic concepts that are important to understand the ShellHub. Those basic concepts are detailed below: SSH Gateway \u00b6 The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean. Device Agent \u00b6 The ShellHub device agent which must be installed on the device. This guide is for those looking for a deeper understanding of ShellHub. If you are looking for instructions on how to set up ShellHub for your device fleet, check out the Getting Started . SSHID \u00b6 SSHID is a unique address to identify a device in ShellHub SSH gateway. SSHID consist of following format: <NAMESPACE>.<DEVICE_NAME>@<GATEWAY_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <DEVICE_NAME> : Is the device name identifier <GATEWAY_ADDRESS> : Is the gateway address identifier Example of SSHID: lab.rasp-1@localhost","title":"Introduction"},{"location":"introduction/#introduction","text":"This introduction section is intended to give a high-level overview of the ShellHub. The ShellHub is composed of two major parts, the SSH Gateway and the Device Agent . These parts work together to provide a secure SSH connection across the network to Linux-based devices.","title":"Introduction"},{"location":"introduction/#basic-concepts","text":"There are few basic concepts that are important to understand the ShellHub. Those basic concepts are detailed below:","title":"Basic concepts"},{"location":"introduction/#ssh-gateway","text":"The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean.","title":"SSH Gateway"},{"location":"introduction/#device-agent","text":"The ShellHub device agent which must be installed on the device. This guide is for those looking for a deeper understanding of ShellHub. If you are looking for instructions on how to set up ShellHub for your device fleet, check out the Getting Started .","title":"Device Agent"},{"location":"introduction/#sshid","text":"SSHID is a unique address to identify a device in ShellHub SSH gateway. SSHID consist of following format: <NAMESPACE>.<DEVICE_NAME>@<GATEWAY_ADDRESS> Where: <NAMESPACE> : Is the account namespace identifier <DEVICE_NAME> : Is the device name identifier <GATEWAY_ADDRESS> : Is the gateway address identifier Example of SSHID: lab.rasp-1@localhost","title":"SSHID"},{"location":"welcome/","text":"The ShellHub is composed of two major parts, the SSH gateway and the device agent . These parts work together to provide a secure SSH connection across the network to Linux-based devices. SSH gateway \u00b6 The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean. Device agent \u00b6 The ShellHub device agent which must be installed on the device.","title":"Welcome"},{"location":"welcome/#ssh-gateway","text":"The ShellHub SSH gateway is a modern SSH server built using the microservices design pattern, meaning that multiple small, isolated services make up the server. It must be installed on any cloud provider like Azure, Google, AWS or DigitalOcean.","title":"SSH gateway"},{"location":"welcome/#device-agent","text":"The ShellHub device agent which must be installed on the device.","title":"Device agent"}]}